@model BankStatementAnalyzer.BusinessLogic.ViewModels.OrderVM
@{
    ViewBag.Title = "Details";
    ViewBag.MainHeading = "Order Details";
    ViewBag.BoxHeader = "Details";
}

@{ Html.RenderPartial("OrderDetailPartial", Model);}

@using (Html.BeginForm("MarkDelivered", "Orders", new { id = Model.OrderId, redirectAction = Model.RedirectAction }, FormMethod.Post))
{
    @Html.HiddenFor(x => x.PaidAmount)
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.PaidAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Order.PaidAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "Off" } })
                        @Html.ValidationMessage("PaidAmount", "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.BalanceAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Order.BalanceAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "Off", tabindex="-1" } })
                        @Html.ValidationMessage("BalanceAmount", "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.AdvanceAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Order.AdvanceAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "Off", tabindex="-1" } })
                        @Html.ValidationMessage("AdvanceAmount", "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.PaymentType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EnumDropDownListFor(model => model.Order.PaymentType, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Order.PaymentType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.MerchantCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Order.MerchantCode, new { htmlAttributes = new { @class = "form-control", @autocomplete = "Off" } })
                        @Html.ValidationMessageFor(model => model.Order.MerchantCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.Tip, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Order.Tip, new { htmlAttributes = new { @class = "form-control", @autocomplete = "Off" } })
                        @Html.ValidationMessageFor(model => model.Order.Tip, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row no-print">
        <div class="col-12">
            <button type="submit" class="btn btn-info ml-15">
                <i class="fa fa-check"></i>Mark as delivered
            </button>
        </div>
    </div>
    @section scripts{
        <script>
            $(document).ready(function () {
                //Order_PaidAmount

                $("#Order_PaidAmount").change(function () {
                    debugger;

                    if ($("#subtotal") == undefined ||
                        $("#subtotal").html() == '' ||
                        $("#Order_PaidAmount").val() == ''

                    ) {
                        return;
                    }


                    var subtotal = parseInt($("#subtotal").html())

                    var finalAmount = subtotal - $("#Order_PaidAmount").val();
                    if (finalAmount < 0) {
                        $("#Order_AdvanceAmount").val(finalAmount * -1)
                        $("#Order_BalanceAmount").val(0)
                    }
                    else if (finalAmount > 0) {
                        $("#Order_BalanceAmount").val(finalAmount)
                        $("#Order_AdvanceAmount").val(0)
                    }
                    else if (finalAmount == 0) {
                        $("#Order_AdvanceAmount").val(0);
                        $("#Order_BalanceAmount").val(0)
                    }
                });
            });
        </script>
    }

}

